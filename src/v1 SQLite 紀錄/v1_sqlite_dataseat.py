# -*- coding: utf-8 -*-
"""v1_sqlite_dataseat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZeQ0CMo2tAJpJLZlJ_L-p_1IzTjpR26J
"""

# -*- coding: utf-8 -*-
"""v1_SQLite_dataseat.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17pEn55UZQDyh7UUPS2cwXva78Jx0Aumx
"""

import sqlite3
import os
from datetime import datetime
from flask import g

# ----------------------------------------------------
# 💡 數據持久化設定：Google Drive 路徑
# ----------------------------------------------------
# 請確保您在 Colab 中已經執行了：from google.colab import drive; drive.mount('/content/drive')
# 這個路徑是 Colab 虛擬機存取您 Google Drive 的標準入口
DRIVE_BASE_PATH = '/content/drive/MyDrive/projects/'

# 建議：將資料庫放在您 Drive 內的一個專屬資料夾
# 您可以將 'LineBot_Data' 替換為任何您喜歡的資料夾名稱
PROJECT_DATA_FOLDER = 'LineBot_Data'

# 最終資料庫檔案的完整路徑
DB_DIR = os.path.join(DRIVE_BASE_PATH, PROJECT_DATA_FOLDER)
DB_NAME = os.path.join(DB_DIR, 'emotion_diary.db')
# ----------------------------------------------------


def get_db():
    """獲取資料庫連線。確保在單個請求中只連線一次。"""
    if 'db' not in g:
        g.db = sqlite3.connect(DB_NAME)
        g.db.row_factory = sqlite3.Row
    return g.db


def close_db(e=None):
    """關閉資料庫連線，在 Flask 請求結束時會被呼叫。"""
    db = g.pop('db', None)
    if db is not None:
        db.close()


def init_db():
    """初始化資料庫：建立資料夾與資料表"""

    # 🌟 關鍵：如果資料夾不存在，就創建它 🌟
    if not os.path.exists(DB_DIR):
        print(f"資料夾不存在，正在創建: {DB_DIR}")
        os.makedirs(DB_DIR)

    conn = sqlite3.connect(DB_NAME)
    cursor = conn.cursor()

    # 建立資料表，包含 V1 到 V3 所有需要的欄位
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS diary_logs (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id TEXT NOT NULL,
            timestamp TEXT NOT NULL,
            raw_text TEXT,
            sentiment TEXT,
            score REAL,
            keywords TEXT
        )
    ''')
    conn.commit()
    conn.close()
    print(f"✅ 資料庫 {DB_NAME} 初始化完成，資料將永久儲存在 Google Drive 上。")


def insert_log(user_id, raw_text, sentiment='Neutral', score=0.0, keywords='[]'):
    """將日記記錄存入資料庫 (使用 g.db 連線)。"""
    db = get_db()
    current_time = datetime.now().isoformat()
    db.execute(
        """
        INSERT INTO diary_logs
        (user_id, timestamp, raw_text, sentiment, score, keywords)
        VALUES (?, ?, ?, ?, ?, ?)
        """,
        (user_id, current_time, raw_text, sentiment, score, keywords)
    )
    db.commit()


def get_user_log_count(user_id):
    """查詢使用者總共寫了多少篇日記。"""
    db = get_db()
    result = db.execute(
        "SELECT COUNT(id) FROM diary_logs WHERE user_id = ?",
        (user_id,)
    ).fetchone()
    # fetchone() 返回的是一個 tuple，取第一個元素就是數量
    return result[0] if result else 0


def get_latest_log(user_id):
    """查詢特定用戶的最新一篇日記內容及 ID。"""
    db = get_db()
    try:
        sql = """
            SELECT id, raw_text  -- 🌟 修正：加入 id 欄位 🌟
            FROM diary_logs 
            WHERE user_id = ? 
            ORDER BY timestamp DESC  
            LIMIT 1
        """
        result = db.execute(sql, (user_id,)).fetchone()

        if result:
            # 🌟 修正：返回 (id, raw_text) 元組 🌟
            return (result[0], result[1])
        else:
            return None
    except Exception as e:
        print(f"查詢最新日記時發生錯誤: {e}")
        return None


def get_first_log(user_id):
    """查詢特定用戶的第一篇（最舊的）日記內容及 ID。"""
    db = get_db()
    try:
        sql = """
            SELECT id, raw_text  -- 🌟 修正：加入 id 欄位 🌟
            FROM diary_logs 
            WHERE user_id = ? 
            ORDER BY timestamp ASC  
            LIMIT 1
        """
        result = db.execute(sql, (user_id,)).fetchone()

        if result:
            # 🌟 修正：返回 (id, raw_text) 元組 🌟
            return (result[0], result[1])
        else:
            return None
    except Exception as e:
        print(f"查詢第一篇日記時發生錯誤: {e}")
        return None


def get_nth_log(user_id, n):
    """查詢特定用戶的第 n 篇日記內容及 ID。"""
    db = get_db()
    if n < 1:
        return None
    offset = n - 1

    try:
        sql = """
            SELECT id, raw_text  -- 🌟 修正：加入 id 欄位 🌟
            FROM diary_logs 
            WHERE user_id = ? 
            ORDER BY timestamp ASC  
            LIMIT 1 
            OFFSET ?              
        """
        result = db.execute(sql, (user_id, offset)).fetchone()

        if result:
            # 🌟 修正：返回 (id, raw_text) 元組 🌟
            return (result[0], result[1])
        else:
            return None

    except Exception as e:
        print(f"查詢第 {n} 篇日記時發生錯誤: {e}")
        return None


def get_all_logs_summary(user_id):
    """
    查詢特定用戶的所有日記紀錄的 ID、時間戳和內容摘要。（已實現清單預覽功能）

    Returns:
        list of tuples: [(id, date_part, summary), ...] 或空列表。
    """
    db = get_db()

    try:
        sql = """
            SELECT id, timestamp, raw_text 
            FROM diary_logs 
            WHERE user_id = ? 
            ORDER BY timestamp ASC
        """
        results = db.execute(sql, (user_id,)).fetchall()

        summary_list = []
        for row in results:
            log_id = row['id']
            timestamp = row['timestamp']
            raw_text = row['raw_text']

            # 格式化時間戳
            date_part = timestamp.split(
                'T')[0] if 'T' in timestamp else timestamp.split(' ')[0]

            # 截斷內容
            summary = raw_text[:20] + ('...' if len(raw_text) > 20 else '')

            summary_list.append((log_id, date_part, summary))

        return summary_list

    except Exception as e:
        print(f"查詢所有日記清單時發生錯誤: {e}")
        return []


# ----------------------------------------------------
# D. 刪除 (Delete)
# ----------------------------------------------------

def delete_all_logs(user_id):
    """刪除特定用戶的所有日記紀錄。"""
    db = get_db()
    try:
        cursor = db.execute(
            "DELETE FROM diary_logs WHERE user_id = ?", (user_id,))
        deleted_count = cursor.rowcount
        db.commit()
        return deleted_count
    except Exception as e:
        print(f"刪除所有日記時發生錯誤: {e}")
        return 0


def delete_nth_log(user_id, n):
    """
    刪除特定用戶的第 n 篇日記。
    （保留此函式以支援舊有邏輯，但建議使用 delete_log_by_id 更精準）
    """
    db = get_db()

    if n < 1:
        return False
    offset = n - 1

    select_id_sql = """
        SELECT id 
        FROM diary_logs 
        WHERE user_id = ? 
        ORDER BY timestamp ASC  
        LIMIT 1 
        OFFSET ?
    """

    try:
        result = db.execute(select_id_sql, (user_id, offset)).fetchone()

        if result:
            log_id = result[0]
            delete_sql = "DELETE FROM diary_logs WHERE id = ?"
            cursor = db.execute(delete_sql, (log_id,))

            db.commit()
            return cursor.rowcount > 0
        else:
            return False

    except Exception as e:
        print(f"刪除第 {n} 篇日記時發生錯誤: {e}")
        return False


def delete_log_by_id(log_id):
    """
    🌟 新增：根據日記的唯一 ID 刪除單篇日記。（這是精準刪除的關鍵）
    """
    db = get_db()

    try:
        cursor = db.execute("DELETE FROM diary_logs WHERE id = ?", (log_id,))
        db.commit()
        return cursor.rowcount > 0
    except Exception as e:
        print(f"根據 ID {log_id} 刪除日記時發生錯誤: {e}")
        return False


if __name__ == '__main__':
    # 首次運行 database.py 時，會執行初始化
    init_db()
